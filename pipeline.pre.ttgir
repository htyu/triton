#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#loc = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":50:0)
#mma = #triton_gpu.nvidia_mma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [4, 1], instrShape = [16, 256, 32]}>
#shared = #triton_gpu.shared<{vec = 16, perPhase = 1, maxPhase = 8, order = [1, 0], hasLeadingOffset = true}>
#shared1 = #triton_gpu.shared<{vec = 16, perPhase = 1, maxPhase = 8, order = [0, 1], hasLeadingOffset = true}>
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @matmul_kernel_tma_persistent(%arg0: !tt.ptr<i8, 0> {tt.nv_tma_desc = 1 : i32} loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":50:0), %arg1: !tt.ptr<i8, 0> {tt.nv_tma_desc = 1 : i32} loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":50:0), %arg2: !tt.ptr<i8, 0> {tt.nv_tma_desc = 1 : i32} loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":50:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":50:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":50:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":50:0)) attributes {noinline = false} {
    %c132_i32 = arith.constant 132 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c127_i32 = arith.constant 127 : i32 loc(#loc1)
    %c255_i32 = arith.constant 255 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<128x256xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.addi %arg3, %c127_i32 : i32 loc(#loc46)
    %2 = arith.divsi %1, %c128_i32 : i32 loc(#loc47)
    %3 = arith.addi %arg4, %c255_i32 : i32 loc(#loc48)
    %4 = arith.divsi %3, %c256_i32 : i32 loc(#loc49)
    %5 = arith.addi %arg5, %c127_i32 : i32 loc(#loc50)
    %6 = arith.divsi %5, %c128_i32 : i32 loc(#loc51)
    %7 = arith.muli %2, %4 : i32 loc(#loc8)
    %8 = arith.divsi %7, %c132_i32 : i32 loc(#loc9)
    %9 = arith.remsi %7, %c132_i32 : i32 loc(#loc10)
    %10 = arith.cmpi slt, %0, %9 : i32 loc(#loc11)
    %11 = scf.if %10 -> (i32) {
      %18 = arith.addi %8, %c1_i32 : i32 loc(#loc13)
      scf.yield %18 : i32 loc(#loc13)
    } else {
      scf.yield %8 : i32 loc(#loc1)
    } loc(#loc12)
    %12 = arith.subi %0, %c132_i32 : i32 loc(#loc14)
    %13 = arith.muli %4, %c8_i32 : i32 loc(#loc15)
    %14 = arith.muli %6, %11 : i32 loc(#loc16)
    %15 = arith.subi %6, %c1_i32 : i32 loc(#loc17)
    %16:5 = scf.for %arg6 = %c0_i32 to %14 step %c1_i32 iter_args(%arg7 = %c-1_i32, %arg8 = %12, %arg9 = %c0_i32, %arg10 = %c0_i32, %arg11 = %cst) -> (i32, i32, i32, i32, tensor<128x256xf32, #mma>)  : i32 {
      %18 = arith.cmpi eq, %arg7, %15 : i32 loc(#loc19)
      %19 = arith.addi %arg7, %c1_i32 : i32 loc(#loc20)
      %20 = arith.select %18, %c0_i32, %19 : i32 loc(#loc21)
      %21 = arith.cmpi eq, %20, %c0_i32 : i32 loc(#loc22)
      %22:3 = scf.if %21 -> (i32, i32, i32) {
        %32 = arith.addi %arg8, %c132_i32 : i32 loc(#loc24)
        %33 = arith.divsi %32, %13 : i32 loc(#loc25)
        %34 = arith.muli %33, %c8_i32 : i32 loc(#loc26)
        %35 = arith.subi %2, %34 : i32 loc(#loc27)
        %36 = arith.minsi %35, %c8_i32 : i32 loc(#loc28)
        %37 = arith.remsi %32, %36 : i32 loc(#loc29)
        %38 = arith.addi %34, %37 : i32 loc(#loc30)
        %39 = arith.remsi %32, %13 : i32 loc(#loc31)
        %40 = arith.divsi %39, %36 : i32 loc(#loc32)
        %41 = arith.muli %38, %c128_i32 : i32 loc(#loc33)
        %42 = arith.muli %40, %c256_i32 : i32 loc(#loc34)
        scf.yield %32, %41, %42 : i32, i32, i32 loc(#loc34)
      } else {
        scf.yield %arg8, %arg9, %arg10 : i32, i32, i32 loc(#loc1)
      } loc(#loc23)
      %23 = arith.muli %20, %c128_i32 : i32 loc(#loc35)
      %24 = tt.experimental_descriptor_load %arg0[%22#1, %23] {tt.warp_group_id = 0 : i32} : !tt.ptr<i8, 0> -> tensor<128x128xf8E4M3FN, #blocked> loc(#loc36)
      %25 = triton_gpu.local_alloc %24 : (tensor<128x128xf8E4M3FN, #blocked>) -> !tt.memdesc<128x128xf8E4M3FN, #shared, #triton_gpu.shared_memory> loc(#loc36)
      %26 = tt.experimental_descriptor_load %arg1[%22#2, %23] {tt.warp_group_id = 0 : i32} : !tt.ptr<i8, 0> -> tensor<256x128xf8E4M3FN, #blocked> loc(#loc37)
      %27 = triton_gpu.local_alloc %26 : (tensor<256x128xf8E4M3FN, #blocked>) -> !tt.memdesc<256x128xf8E4M3FN, #shared, #triton_gpu.shared_memory> loc(#loc38)
      %28 = tt.trans %27 {order = array<i32: 1, 0>} : !tt.memdesc<256x128xf8E4M3FN, #shared, #triton_gpu.shared_memory> -> !tt.memdesc<128x256xf8E4M3FN, #shared1, #triton_gpu.shared_memory> loc(#loc38)
      %29 = triton_nvidia_gpu.warp_group_dot %25, %28, %arg11 {inputPrecision = 0 : i32, maxNumImpreciseAcc = 1073741824 : i32, tt.warp_group_id = 1 : i32} : !tt.memdesc<128x128xf8E4M3FN, #shared, #triton_gpu.shared_memory> * !tt.memdesc<128x256xf8E4M3FN, #shared1, #triton_gpu.shared_memory> -> tensor<128x256xf32, #mma> loc(#loc39)
      %30 = arith.cmpi eq, %20, %15 : i32 loc(#loc40)
      %31 = scf.if %30 -> (tensor<128x256xf32, #mma>) {
        %32 = tt.fp_to_fp %29, rounding = rtne : tensor<128x256xf32, #mma> -> tensor<128x256xf8E4M3FN, #mma> loc(#loc42)
        %33 = triton_gpu.convert_layout %32 : tensor<128x256xf8E4M3FN, #mma> -> tensor<128x256xf8E4M3FN, #blocked> loc(#loc42)
        tt.experimental_descriptor_store %arg2[%22#1, %22#2], %33  {tt.warp_group_id = 1 : i32} : !tt.ptr<i8, 0>, tensor<128x256xf8E4M3FN, #blocked> loc(#loc43)
        scf.yield %cst : tensor<128x256xf32, #mma> loc(#loc41)
      } else {
        scf.yield %29 : tensor<128x256xf32, #mma> loc(#loc41)
      } loc(#loc41)
      scf.yield %20, %22#0, %22#1, %22#2, %31 : i32, i32, i32, i32, tensor<128x256xf32, #mma> loc(#loc44)
    } loc(#loc18)
    %17 = triton_nvidia_gpu.get_canonical_warp_id : i32 loc(#loc)
    tt.return loc(#loc45)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":65:30)
#loc3 = loc("/home/hoy/triton/python/triton/language/standard.py":40:22)
#loc4 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":66:27)
#loc5 = loc("/home/hoy/triton/python/triton/language/standard.py":40:28)
#loc6 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":67:27)
#loc7 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":68:25)
#loc8 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":69:28)
#loc9 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":71:32)
#loc10 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":72:31)
#loc11 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":72:19)
#loc12 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":72:7)
#loc13 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":73:24)
#loc14 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":75:26)
#loc15 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":83:38)
#loc16 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":87:32)
#loc17 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":88:38)
#loc18 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":87:22)
#loc19 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":88:28)
#loc20 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":88:49)
#loc21 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":88:44)
#loc22 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":89:17)
#loc23 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":89:11)
#loc24 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":90:23)
#loc25 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":91:34)
#loc26 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":92:37)
#loc27 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":93:43)
#loc28 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":93:56)
#loc29 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":94:45)
#loc30 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":94:35)
#loc31 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":95:31)
#loc32 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":95:52)
#loc33 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":97:30)
#loc34 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":98:30)
#loc35 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":100:22)
#loc36 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":102:106)
#loc37 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":103:106)
#loc38 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":104:32)
#loc39 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":104:37)
#loc40 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":106:17)
#loc41 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":106:11)
#loc42 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":107:31)
#loc43 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":109:61)
#loc44 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":106:8)
#loc45 = loc("/home/hoy/triton/python/tutorials/10-persistent-matmul-WS.py":87:4)
#loc46 = loc(callsite(#loc3 at #loc4))
#loc47 = loc(callsite(#loc5 at #loc4))
#loc48 = loc(callsite(#loc3 at #loc6))
#loc49 = loc(callsite(#loc5 at #loc6))
#loc50 = loc(callsite(#loc3 at #loc7))
#loc51 = loc(callsite(#loc5 at #loc7))
